// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * API endpoints and details
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';
import type { TaskList } from './TaskList';
import {
    TaskListFromJSON,
    TaskListFromJSONTyped,
    TaskListToJSON,
} from './TaskList';

/**
 * 
 * @export
 * @interface UserTaskList
 */
export interface UserTaskList {
    /**
     * UserTaskList ID
     * @type {number}
     * @memberof UserTaskList
     */
    id: number;
    /**
     * Associated user
     * @type {User}
     * @memberof UserTaskList
     */
    user: User;
    /**
     * Associated task list
     * @type {TaskList}
     * @memberof UserTaskList
     */
    taskList: TaskList;
    /**
     * Role of the user in the task list
     * @type {string}
     * @memberof UserTaskList
     */
    role: UserTaskListRoleEnum;
    /**
     * Creation date
     * @type {Date}
     * @memberof UserTaskList
     */
    createdAt: Date;
    /**
     * Last update date
     * @type {Date}
     * @memberof UserTaskList
     */
    updatedAt: Date | null;
}


/**
 * @export
 */
export const UserTaskListRoleEnum = {
    Owner: 'OWNER',
    Admin: 'ADMIN',
    Viewer: 'VIEWER'
} as const;
export type UserTaskListRoleEnum = typeof UserTaskListRoleEnum[keyof typeof UserTaskListRoleEnum];


/**
 * Check if a given object implements the UserTaskList interface.
 */
export function instanceOfUserTaskList(value: object): value is UserTaskList {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('taskList' in value) || value['taskList'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function UserTaskListFromJSON(json: any): UserTaskList {
    return UserTaskListFromJSONTyped(json, false);
}

export function UserTaskListFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserTaskList {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'user': UserFromJSON(json['user']),
        'taskList': TaskListFromJSON(json['taskList']),
        'role': json['role'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (json['updatedAt'] == null ? null : new Date(json['updatedAt'])),
    };
}

export function UserTaskListToJSON(value?: UserTaskList | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'user': UserToJSON(value['user']),
        'taskList': TaskListToJSON(value['taskList']),
        'role': value['role'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': (value['updatedAt'] == null ? null : (value['updatedAt'] as any).toISOString()),
    };
}

