// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * API endpoints and details
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTaskListDto,
  InviteUserDto,
  TaskListControllerRemoveUserRequest,
  UpdateProjectDto,
} from '../models/index';
import {
    CreateTaskListDtoFromJSON,
    CreateTaskListDtoToJSON,
    InviteUserDtoFromJSON,
    InviteUserDtoToJSON,
    TaskListControllerRemoveUserRequestFromJSON,
    TaskListControllerRemoveUserRequestToJSON,
    UpdateProjectDtoFromJSON,
    UpdateProjectDtoToJSON,
} from '../models/index';

export interface TaskListControllerCreateRequest {
    createTaskListDto: CreateTaskListDto;
}

export interface TaskListControllerGetAllRequest {
    limit?: number;
    page?: number;
}

export interface TaskListControllerGetByIdRequest {
    id: number;
}

export interface TaskListControllerInviteUserRequest {
    id: number;
    inviteUserDto: InviteUserDto;
}

export interface TaskListControllerRemoveUserOperationRequest {
    id: number;
    taskListControllerRemoveUserRequest: TaskListControllerRemoveUserRequest;
}

export interface TaskListControllerUpdateRequest {
    id: number;
    updateProjectDto: UpdateProjectDto;
}

/**
 * 
 */
export class TaskListApi extends runtime.BaseAPI {

    /**
     * Create a new project
     */
    async taskListControllerCreateRaw(requestParameters: TaskListControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['createTaskListDto'] == null) {
            throw new runtime.RequiredError(
                'createTaskListDto',
                'Required parameter "createTaskListDto" was null or undefined when calling taskListControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskListDtoToJSON(requestParameters['createTaskListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create a new project
     */
    async taskListControllerCreate(requestParameters: TaskListControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.taskListControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all projects for the current user
     */
    async taskListControllerGetAllRaw(requestParameters: TaskListControllerGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all projects for the current user
     */
    async taskListControllerGetAll(requestParameters: TaskListControllerGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.taskListControllerGetAllRaw(requestParameters, initOverrides);
    }

    /**
     * Get a project by its ID
     */
    async taskListControllerGetByIdRaw(requestParameters: TaskListControllerGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskListControllerGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a project by its ID
     */
    async taskListControllerGetById(requestParameters: TaskListControllerGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.taskListControllerGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invite a user to the project
     */
    async taskListControllerInviteUserRaw(requestParameters: TaskListControllerInviteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskListControllerInviteUser().'
            );
        }

        if (requestParameters['inviteUserDto'] == null) {
            throw new runtime.RequiredError(
                'inviteUserDto',
                'Required parameter "inviteUserDto" was null or undefined when calling taskListControllerInviteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{id}/users/invite`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InviteUserDtoToJSON(requestParameters['inviteUserDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invite a user to the project
     */
    async taskListControllerInviteUser(requestParameters: TaskListControllerInviteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.taskListControllerInviteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a user from the project
     */
    async taskListControllerRemoveUserRaw(requestParameters: TaskListControllerRemoveUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskListControllerRemoveUser().'
            );
        }

        if (requestParameters['taskListControllerRemoveUserRequest'] == null) {
            throw new runtime.RequiredError(
                'taskListControllerRemoveUserRequest',
                'Required parameter "taskListControllerRemoveUserRequest" was null or undefined when calling taskListControllerRemoveUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{id}/users/remove`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: TaskListControllerRemoveUserRequestToJSON(requestParameters['taskListControllerRemoveUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a user from the project
     */
    async taskListControllerRemoveUser(requestParameters: TaskListControllerRemoveUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.taskListControllerRemoveUserRaw(requestParameters, initOverrides);
    }

    /**
     * Update project details
     */
    async taskListControllerUpdateRaw(requestParameters: TaskListControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling taskListControllerUpdate().'
            );
        }

        if (requestParameters['updateProjectDto'] == null) {
            throw new runtime.RequiredError(
                'updateProjectDto',
                'Required parameter "updateProjectDto" was null or undefined when calling taskListControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectDtoToJSON(requestParameters['updateProjectDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update project details
     */
    async taskListControllerUpdate(requestParameters: TaskListControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.taskListControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
